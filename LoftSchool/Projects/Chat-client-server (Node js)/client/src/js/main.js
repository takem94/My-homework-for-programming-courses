(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (global){
'use strict';

function load() {
  var modalTemplate = document.getElementById('modalTemplate').innerHTML;
  var avatarTemplate = document.getElementById('avatarTemplate').innerHTML;
  var authTemplate = document.getElementById('authenticationTemplate').innerHTML;
  var usersTemplate = document.getElementById('usersTemplate').innerHTML;
  var messageTemplate = document.getElementById('messageTemplate').innerHTML;
  var modalRender = global.Handlebars.compile(modalTemplate);
  var avatarRender = global.Handlebars.compile(avatarTemplate);
  var authRender = global.Handlebars.compile(authTemplate);
  var usersRender = global.Handlebars.compile(usersTemplate);
  var messageRender = global.Handlebars.compile(messageTemplate);

  function showAuth() {
    document.body.innerHTML += modalRender({
      windowName: 'Авторизация',
      windowBody: authRender({})
    });
  }

  function showAvatarChanger() {
    document.body.innerHTML += modalRender({
      windowName: 'Смена аватара',
      windowBody: avatarRender({})
    });
  }

  function removeModal() {
    var modal = document.getElementById('modal');

    if (modal) {
      modal.outerHTML = '';
    }
  }

  function changeChatName(firstName, lastName) {
    var nameElem = document.getElementById('chatUserName');
    nameElem.innerText = "".concat(firstName, " ").concat(lastName);
  }

  function changeAvatar(src) {
    var avatar = document.querySelector('.user-profile__avatar img');
    avatar.src = src;
  }

  function changePreview(src) {
    var avatar = document.querySelector('.drag-n-drop__preview');
    avatar.src = src;
  }

  function changeAvatarMessage(userId, src) {
    var allMessages = document.querySelectorAll("li[data-user-id=\"".concat(userId, "\"] img"));
    allMessages.forEach(function (elem) {
      elem.setAttribute('src', src);
    });
  }

  function listScrollToBottom(elem) {
    elem.scrollTop = elem.scrollHeight;
  }

  function renderUserListPanel(data) {
    var chatPanel = document.getElementById('chatPanel');
    chatPanel.innerHTML = usersRender(data);
  }

  function showChatArea() {
    var chatArea = document.getElementById('chat');
    chatArea.style.opacity = '1';
    chatArea.offsetHeight;
  }

  function hideChatArea() {
    var chatArea = document.getElementById('chat');
    chatArea.style.opacity = '0';
    chatArea.offsetHeight;
  }

  function parseTime(time) {
    time = new Date(time);
    time = (time.getHours() < 10 ? '0' + time.getHours() : time.getHours()) + ':' + (time.getMinutes() < 10 ? '0' + time.getMinutes() : time.getMinutes()) + ':' + (time.getSeconds() < 10 ? '0' + time.getSeconds() : time.getSeconds());
    return time;
  }

  function removeAnimation(messageId, time) {
    var elem = document.querySelector("li[data-message-id=\"".concat(messageId, "\"]"));
    setTimeout(function () {
      elem.classList.remove('fade-in');
    }, time);
  }

  var fileReader;
  var result;
  var dragAndDrop;
  var dragTimeout;
  var dragZoneTimeout;
  var eventsObject = {
    onUploadChange: function onUploadChange(e) {
      var file = e.target.files[0];
      fileReader = new global.FileReader();
      fileReader.addEventListener('loadend', this.onEnd.bind(this));

      if (file && file.type === 'image/jpeg') {
        fileReader.readAsDataURL(file);
      } else {
        window.alert('Пожалуйста, выберите файл с расширением jpeg.');
      }

      e.target.removeEventListener('change', this.onUploadChange);
    },
    onEnd: function onEnd() {
      result = {
        type: 'user-avatar',
        data: fileReader.result
      };
      changePreview(fileReader.result);
      fileReader.removeEventListener('loadend', this.onEnd);
    },
    onDrag: function onDrag(e) {
      e.preventDefault();
      console.log('Class: eventsObject, Line: 116 ', e);
    },
    preventDefaults: function preventDefaults(e) {
      e.preventDefault();
      e.stopPropagation();
    },
    highlight: function highlight() {
      dragAndDrop.classList.add('highlight');
    },
    unhighlight: function unhighlight() {
      dragAndDrop.classList.remove('highlight');
    },
    onEnter: function onEnter() {
      if (!dragAndDrop) {
        return;
      }

      dragAndDrop.classList.add('prepare');
    },
    onEndDrag: function onEndDrag() {
      dragAndDrop.classList.remove('prepare');
    },
    onDragOver: function onDragOver() {
      if (!dragAndDrop) {
        return;
      }

      if (dragTimeout !== undefined) {
        window.clearTimeout(dragTimeout);
      }

      dragTimeout = window.setTimeout(function () {
        eventsObject.onEndDrag();
      }, 200);
    },
    onDragEnterZone: function onDragEnterZone() {
      dragAndDrop.classList.add('highlight');
    },
    onDragOverZone: function onDragOverZone() {
      if (!dragAndDrop) {
        return;
      }

      eventsObject.onDragOver();

      if (dragZoneTimeout !== undefined) {
        window.clearTimeout(dragZoneTimeout);
      }

      dragZoneTimeout = window.setTimeout(function () {
        dragAndDrop.classList.remove('highlight');
      }, 200);
    },
    onDropZone: function onDropZone(e) {
      var uploader = document.getElementById('imgUpload');
      var dropedFiles = e.dataTransfer.files;

      if (uploader) {
        uploader.files = dropedFiles;
      } else {
        return;
      }

      uploader.addEventListener('change', eventsObject.onUploadChange.bind(eventsObject));
      uploader.dispatchEvent(new global.Event('change'));
    },
    doDnDListeners: function doDnDListeners(dragAndDrop, what) {
      var whatToDo;

      if (what === 'unset') {
        whatToDo = 'removeEventListener';
      } else if (what === 'set') {
        whatToDo = 'addEventListener';
      } else {
        return;
      }

      ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(function (eventName) {
        dragAndDrop[whatToDo](eventName, eventsObject.preventDefaults);
      });
      dragAndDrop[whatToDo]('dragenter', eventsObject.onDragEnterZone, false);
      dragAndDrop[whatToDo]('dragover', eventsObject.onDragOverZone, false);
      dragAndDrop[whatToDo]('drop', eventsObject.onDropZone, false);
    }
  };
  document.addEventListener('dragenter', eventsObject.onEnter, false);
  document.addEventListener('dragover', eventsObject.onDragOver, false);
  document.addEventListener('click', function (e) {
    if (e.target.parentElement.classList.contains('user-profile__avatar')) {
      showAvatarChanger();
      dragAndDrop = document.querySelector('.drag-n-drop__zone');
      eventsObject.doDnDListeners(dragAndDrop, 'set');
    }

    if (e.target.classList.contains('drag-n-drop__add')) {
      var uploader = document.getElementById('imgUpload');
      dragAndDrop = document.querySelector('.drag-n-drop__zone');
      uploader.addEventListener('change', eventsObject.onUploadChange.bind(eventsObject));
      uploader.dispatchEvent(new window.MouseEvent('click'));
    }

    if (e.target.getAttribute('id') === 'saveBtnAvatar') {
      if (result) {
        ws.send(JSON.stringify(result));
        eventsObject.doDnDListeners(dragAndDrop, 'unset');
        removeModal();
      } else {
        window.alert('Фото не выбрано.');
      }
    }

    if (e.target.getAttribute('id') === 'cancelBtnAvatar') {
      eventsObject.doDnDListeners(dragAndDrop, 'unset');
      removeModal();
    }
  });
  document.addEventListener('submit', function (e) {
    if (e.target.getAttribute('id') === 'auth') {
      e.preventDefault();
      var fnameInput = document.getElementById('fname');
      var lnameInput = document.getElementById('lname');

      if (fnameInput.value.length > 2 && lnameInput.value.length > 2) {
        var userData = {
          fullName: "".concat(fnameInput.value, " ").concat(lnameInput.value),
          firstName: fnameInput.value,
          lastName: lnameInput.value,
          type: 'user-join'
        };
        ws.send(JSON.stringify(userData));
      }
    }

    if (e.target.getAttribute('id') === 'messageForm') {
      e.preventDefault();
      var messageInput = document.getElementById('messageInput');

      if (messageInput.value.length > 0) {
        var dataToSend = {
          message: messageInput.value,
          fullName: userInfo.fullName,
          type: 'user-message'
        };
        ws.send(JSON.stringify(dataToSend));
        messageInput.value = '';
      }
    }
  }); //
  // WebSocket
  //

  var ws;
  var userInfo = {};
  var usersData = [];

  var webSocketConnect = function webSocketConnect(location) {
    window.WebSocket = window.WebSocket || window.MozWebSocket;
    ws = new window.WebSocket(location);

    ws.onopen = function () {
      showAuth();
    };

    ws.onmessage = function (message) {
      var data = JSON.parse(message.data);
      var user = data.userId ? usersData.find(function (elem) {
        return elem.userId === data.userId;
      }) || {} : {};

      if (data.type === 'user-join') {
        changeChatName(data.firstName, data.lastName);
        removeModal();
        showChatArea();
        userInfo = data;
      }

      if (data.type === 'users-list') {
        var _loop = function _loop(i, _elem) {
          _elem = data.users[i];
          var findUser = usersData.find(function (userData) {
            return userData.userId === _elem.id;
          });

          if (!findUser) {
            usersData.push(_elem);
          }

          elem = _elem;
        };

        for (var i = 0, elem; i < data.count; ++i) {
          _loop(i, elem);
        }

        renderUserListPanel({
          users: usersData,
          count: usersData.length
        });
      }

      if (data.type === 'user-add') {
        usersData.push(data);
        renderUserListPanel({
          users: usersData,
          count: usersData.length
        });
      }

      if (data.type === 'user-message') {
        var messageList = document.getElementById('messageList');
        data.time = parseTime(data.time);
        data.avatar = user.avatar || './img/avatar.png';
        messageList.innerHTML += messageRender(data);
        removeAnimation(data.messageId, 1070);
        listScrollToBottom(messageList);
      }

      if (data.type === 'user-avatar') {
        if (data.userId === userInfo.userId) {
          changeAvatar(data.data);
        }

        user['avatar'] = data.data;
        changeAvatarMessage(data.userId, data.data);
      }

      if (data.type === 'user-remove') {
        var indexDel = usersData.findIndex(function (elem) {
          return elem.userId === data.userId;
        });

        if (indexDel !== undefined) {
          usersData.splice(indexDel, 1);
        }

        renderUserListPanel({
          users: usersData,
          count: usersData.length
        });
      }
    };

    ws.onclose = function () {
      userInfo = {};
      usersData = [];
      hideChatArea();
      removeModal(); // Try reconnect every 2.5 sec.

      setTimeout(function () {
        webSocketConnect(location);
      }, 2500);
    };
  };

  webSocketConnect('ws://192.168.0.100:8085');
}

(function () {
  window.addEventListener('DOMContentLoaded', load);
})();

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
